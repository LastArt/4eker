package main

import (
	"kontroller/pkg"
	"kontroller/set"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// =================================================================================
// –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
// =================================================================================
var nmShowVisiters = tgbotapi.NewReplyKeyboard( // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –ø—Ä–∏—Å—É—Ç—Å–≤—É–±—â–∏—Ö
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üëÅ –ö—Ç–æ –≤ —Ü–µ—Ö—É"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üìä –û—Ç—á–µ—Ç—ã"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
	),
)

var nmKeyJournal = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üìñ –ñ—É—Ä–Ω–∞–ª –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"), // –ó–∞ –ø–µ—Ä–∏–æ–¥
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üíµ –ó–ü –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"), // –ó–∞ –ø–µ—Ä–∏–æ–¥
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üìÜ –ñ—É—Ä–Ω–∞–ª –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥"), // –ó–∞ –ø–µ—Ä–∏–æ–¥
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"),
	),
)
var nmKeySettings = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üë∑üèΩ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"), //–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ—â–µ 3 –∫–Ω–æ–ø–∫–∏ nmKeyEmpl
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("ü¶∏üèª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"), //–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ—â–µ 3 –∫–Ω–æ–ø–∫–∏ nmKeyAdmin
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"), //–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ—â–µ 3 –∫–Ω–æ–ø–∫–∏ nmKeyDataBase
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"),
	),
)

// ============= –í–¢–û–†–û–ô –£–†–û–í–ï–ù–¨ –ö–ù–û–ü–û–ö nmKeySettings=========================
var nmKeyEmpl = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üóÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"),
	),
)

var nmKeyAdmin = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üóÇ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"),
	),
)

var nmKeyDataBase = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üîå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üì¶ –°–¥–µ–ª–∞—Ç—å –±–µ–∫–∞–ø –ë–î"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"),
	),
)

// ============== –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò ============================
var exitKey = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–í—ã—Ö–æ–¥", "exit"),
	),
)

//=============== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –° –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ê–ú–ò =============

func main() {
	bot, _ := tgbotapi.NewBotAPI(pkg.GetKey(set.TokenFile))

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	log.Printf("Authorized on account %s", bot.Self.UserName)
	//log.Printf("ChatID%s", ch)

	usr := new(pkg.User)
	supUser := new(pkg.SuperUser)
	jrnl := new(pkg.Journal)
	for update := range updates {

		if update.Message != nil {

			//msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:"+update.Message.Text)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
			// SWITCH.
			msgGenaral := update.Message.Text
			log.Println("msgGeneral -> ", msgGenaral)
			switch update.Message.Text {
			case "/start":
				keys := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
				keys.ReplyMarkup = nmShowVisiters
				bot.Send(keys)
			case "üëÅ–ö—Ç–æ –≤ —Ü–µ—Ö—É":
				resOut := jrnl.WhoInPlaceForBot()
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, resOut)
				bot.Send(msg)
			case "üìä –û—Ç—á–µ—Ç—ã":
				keys := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∫–ª—é—á–∏–ª --->"+update.Message.Text)
				keys.ReplyMarkup = nmKeyJournal
				bot.Send(keys)
			case "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
				var bln bool
				var str string
				msg.Text = "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å \n–ü—Ä–∏–º–µ—Ä: Admin/qwerty123"
				bot.Send(msg)
				for upd := range updates {
					msgIn := upd.Message.Text
					if msgIn == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è" {
						break
					} else {
						res := pkg.NumberValuator(msgIn)
						if len(res) == 2 {
							bln, str = pkg.CheckAdminUser(res[0], res[1])
							if bln != true {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, str)
								bot.Send(msg)
							} else {
								keys := tgbotapi.NewMessage(update.Message.Chat.ID, str)
								keys.ReplyMarkup = nmKeySettings
								bot.Send(keys)
							}

						} else {
							msg.Text = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–¢—Ä–µ–±—É–µ—Ç—Å—è 1 –∑–Ω–∞—á–µ–Ω–∏–µ"
							bot.Send(msg)
						}
					}
				}

			case "üë∑üèΩ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏":
				keys := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∫–ª—é—á–∏–ª --->"+update.Message.Text)
				keys.ReplyMarkup = nmKeyEmpl
				bot.Send(keys)
			case "ü¶∏üèª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã":
				keys := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∫–ª—é—á–∏–ª --->"+update.Message.Text)
				keys.ReplyMarkup = nmKeyAdmin
				bot.Send(keys)
			case "üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö":
				keys := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∫–ª—é—á–∏–ª --->"+update.Message.Text)
				keys.ReplyMarkup = nmKeyDataBase
				bot.Send(keys)
			case "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è":
				keys := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
				keys.ReplyMarkup = nmShowVisiters
				bot.Send(keys)
			// –¢–£–¢ –ò–î–ï–¢ –°–ï–†–ò–Ø –ö–ï–ô–°–û–í –ü–û –û–ë–†–ê–ë–û–¢–ö–ï –ö–û–ù–ï–ß–ù–´–• –ü–£–ù–ö–¢–û–í –ú–ï–ù–Æ (–ö–æ–Ω–µ—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!)
			case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞": // –ì–û–¢–û–í–û
				msg.Text = "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ \n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/–§–ò–û –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞/–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞/–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ '/'\n–ü—Ä–∏–º–µ—Ä: 485548845/–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á/–°–ª–µ—Å–∞—Ä—å/45000"
				bot.Send(msg)
				for upd := range updates {
					msgIn := upd.Message.Text
					if msgIn == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è" {
						break
					} else {
						res := pkg.NumberValuator(msgIn)
						var r string
						if len(res) == 4 {
							r = usr.AddInBot(res[0], res[1], res[2], res[3])
							msg.Text = r
							bot.Send(msg)
						} else {
							msg.Text = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–¢—Ä–µ–±—É–µ—Ç—Å—è 4 –∑–Ω–∞—á–µ–Ω–∏—è"
							bot.Send(msg)
						}
					}
				}
			case "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞": // –ì–û–¢–û–í–û
				msg.Text = "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —É–¥–∞–ª—è–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ \n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
				bot.Send(msg)
				for upd := range updates {
					msgIn := upd.Message.Text
					if msgIn == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è" {
						break
					} else {
						res := pkg.NumberValuator(msgIn)
						var r string
						if len(res) == 1 {
							r = usr.DeleteRowInBot(res[0])
							msg.Text = r
							bot.Send(msg)
						} else {
							msg.Text = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–¢—Ä–µ–±—É–µ—Ç—Å—è 1 –∑–Ω–∞—á–µ–Ω–∏–µ"
							bot.Send(msg)
						}
					}
				}
			case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞": // TODO –î–æ–¥–µ–ª–∞—Ç—å
			case "üóÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤": // –ì–û–¢–û–í–û
				resOut := usr.ShowAllInBot()
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, resOut)
				bot.Send(msg)
			case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞": // –ì–û–¢–û–í–û
				msg.Text = "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ \n–õ–æ–≥–∏–Ω/–ü–∞—Ä–æ–ª—å/–ü–æ—á—Ç–∞ —á–µ—Ä–µ–∑ '/'\n–ü—Ä–∏–º–µ—Ä: Admin/qwerty123/admin@mail.ru"
				bot.Send(msg)
				for upd := range updates {
					msgIn := upd.Message.Text
					if msgIn == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è" {
						break
					} else {
						res := pkg.NumberValuator(msgIn)
						var r string
						if len(res) == 3 {
							r = supUser.AddInBot(res[0], res[1], res[2])
							msg.Text = r
							bot.Send(msg)
						} else {
							msg.Text = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–¢—Ä–µ–±—É–µ—Ç—Å—è 4 –∑–Ω–∞—á–µ–Ω–∏—è"
							bot.Send(msg)
						}
					}
				}
			case "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞": // –ì–û–¢–û–í–û
				msg.Text = "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω \n–ü—Ä–∏–º–µ—Ä: Admin"
				bot.Send(msg)
				for upd := range updates {
					msgIn := upd.Message.Text
					if msgIn == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è" {
						break
					} else {
						res := pkg.NumberValuator(msgIn)
						var r string
						if len(res) == 1 {
							r = supUser.DeleteRowInBot(res[0])
							msg.Text = r
							bot.Send(msg)
						} else {
							msg.Text = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–¢—Ä–µ–±—É–µ—Ç—Å—è 1 –∑–Ω–∞—á–µ–Ω–∏–µ"
							bot.Send(msg)
						}
					}
				}
			case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞": // TODO –î–æ–¥–µ–ª–∞—Ç—å
			case "üóÇ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤": //–ì–û–¢–û–í–û
				resOut := supUser.ShowAllInBot()
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, resOut)
				bot.Send(msg)
			// * –ü–æ–¥–º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
			case "üîå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ": // TODO –î–æ–¥–µ–ª–∞—Ç—å
			case "üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö": // TODO –î–æ–¥–µ–ª–∞—Ç—å
			case "üì¶ –°–¥–µ–ª–∞—Ç—å –±–µ–∫–∞–ø –ë–î": // TODO –î–æ–¥–µ–ª–∞—Ç—å
			case "‚öôÔ∏è–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è": // TODO –î–æ–¥–µ–ª–∞—Ç—å
			// * –ü–æ–¥–º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–û—Ç—á–µ—Ç—ã"
			case "üìñ –ñ—É—Ä–Ω–∞–ª –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥":
				msg.Text = "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –∂—É—Ä–Ω–∞–ª\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: 01.05.2022/13.05.2022/–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
				bot.Send(msg)
				for upd := range updates {
					msgIn := upd.Message.Text
					if msgIn == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è" {
						break
					} else {
						res := pkg.NumberValuator(msgIn)
						if len(res) == 3 {
							pkg.PresentJournalToEmpl(res[0], res[1], res[2])
							file := tgbotapi.FilePath(set.ExcelFile)
							msg := tgbotapi.NewDocument(update.Message.Chat.ID, file)
							bot.Send(msg)
						} else {
							msg.Text = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–¢—Ä–µ–±—É–µ—Ç—Å—è 1 –∑–Ω–∞—á–µ–Ω–∏–µ"
							bot.Send(msg)
						}
					}
				}
			case "üíµ –ó–ü –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥":
				msg.Text = "‚ö†Ô∏è –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
				bot.Send(msg)
			case "üìÜ –ñ—É—Ä–Ω–∞–ª –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥":
				msg.Text = "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –∂—É—Ä–Ω–∞–ª \n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: 01.05.2022/13.05.2022"
				bot.Send(msg)
				for upd := range updates {
					msgIn := upd.Message.Text
					if msgIn == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è" {
						break
					} else {
						res := pkg.NumberValuator(msgIn)
						if len(res) == 2 {
							pkg.PresentJournalToDay(res[0], res[1])
							file := tgbotapi.FilePath(set.ExcelFile)
							msg := tgbotapi.NewDocument(update.Message.Chat.ID, file)
							bot.Send(msg)
						} else {
							msg.Text = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n–¢—Ä–µ–±—É–µ—Ç—Å—è 1 –∑–Ω–∞—á–µ–Ω–∏–µ"
							bot.Send(msg)
						}
					}
				}
			}
			// Send the message.

			// if _, err := bot.Send(msg); err != nil {
			// 	panic(err)
			// }
		} else if update.CallbackQuery != nil {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
			if _, err := bot.Request(callback); err != nil {
				panic(err)
			}
			// msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Data)
			// if _, err := bot.Send(msg); err != nil {
			// 	panic(err)
			// }
			switch callback.Text {
			case "exit":
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, update.Message.Text)
				bot.Send(msg)
			}
		}
	}
}
