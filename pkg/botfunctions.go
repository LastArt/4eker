package pkg

import (
	"4eker/set"
	"database/sql"
	"fmt"
	"log"

	_ "github.com/go-sql-driver/mysql"
)

//–ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è—é—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞!
func (su SuperUser) AddInBot(log, pass, mail string) string {
	var res string
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("INSERT INTO superuser (login, password, email) VALUES (?, ?, ?)", log, pass, mail)
	if err != nil {
		res = set.BOT_ERROR_ADDTODB
	} else {
		res = set.BOT_WARNING_ADD_FINE
	}

	return res
}

//–ú–µ—Ç–æ–¥ —É–¥–∞–ª—è—é—â–∏–π  –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —á–∞—Ç–∞ –±–æ—Ç–∞
func (su SuperUser) DeleteRowInBot(id string) string {
	var res string
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("DELETE FROM superuser WHERE id = ?", id)
	if err != nil {
		res = set.BOT_ERROR_DELETE_USER
	} else {
		res = set.BOT_WARNING_DELETE_FINE
	}
	return res
}

// –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤  –∏–∑ —á–∞—Ç –±–æ—Ç–∞
func (su SuperUser) EditFromBot(id, newLogin, newPass, newMail string) (string, string) {
	var res, show string
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()

	_, err = db.Exec("UPDATE superuser SET login = ? WHERE id = ?", newLogin, id)
	_, err = db.Exec("UPDATE superuser SET password = ? WHERE id = ?", newPass, id)
	_, err = db.Exec("UPDATE superuser SET email = ? WHERE id = ?", newMail, id)
	if err != nil {
		res = set.BOT_ERROR_EDITUSER
	} else {
		res = set.BOT_WARNING_EDITUSER_FINE
		show = su.ShowAllInBot()
	}

	return res, show
}

// 3 –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —á–∞—Ç –±–æ—Ç–∞
func (su SuperUser) ShowAllInBot() string {
	var id string
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("SELECT * FROM superuser")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	var str string

	for rows.Next() {
		err := rows.Scan(&id, &su.Login, &su.Pass, &su.Email)
		if err != nil {
			fmt.Println(err)
			continue
		}

		str += "\n ID: " + id + "\n –õ–æ–≥–∏–Ω: " + su.Login + "\n –ü–∞—Ä–æ–ª—å: " + su.Pass + "\n –ü–æ—á—Ç–∞: " + su.Email + "\n=====================\n"
	}
	return str
}

// –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –≤ –±–æ—Ç –≤—Å–µ—Ö –ø—Ä–∏—Å—É—Ç—Å–≤—É—é—â–∏—Ö –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.
func (j Journal) WhoInPlaceForBot() string {

	datetime := TmFormat()
	dt := datetime.Format("02.01.2006")
	tm := datetime.Format("15:04")
	var id string
	fmt.Println("–°–µ–≥–æ–¥–Ω—è: ", dt)
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("SELECT * FROM journal WHERE date = ? AND time < ?", dt, tm)
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	var str string

	for rows.Next() {
		err := rows.Scan(&id, &j.User.Fio, &j.Date, &j.Time)
		if err != nil {
			fmt.Println(err)
			continue
		}
		str += "\nID: " + id + "\n–§–ò–û: " + j.User.Fio + "\n–î–∞—Ç–∞ –æ—Ç–º–µ—Ç–∫–∏: " + j.Date + "\n–í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∫–∏: " + j.Time + "\n=====================\n"
	}
	return str
}

// –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–æ—Ç–∞!
func (u User) ShowAllInBot() string {
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("SELECT * FROM user")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	var str string
	for rows.Next() {
		err := rows.Scan(&u.Cardid, &u.Fio, &u.Speciality, &u.Salary)
		if err != nil {
			fmt.Println(err)
			continue
		}
		str += "\n –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: " + u.Cardid + "\n –§–ò–û: " + u.Fio + "\n –î–æ–ª–∂–Ω–æ—Å—Ç—å: " + u.Speciality + "\n –ó–∞—Ä–ø–ª–∞—Ç–∞: " + u.Salary + "\n=====================\n"
	}
	return str
}

// –ú–µ—Ç–æ–¥ —É–¥–∞–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞!
func (u User) DeleteRowInBot(card string) (string, string) {
	var res, show string
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("DELETE FROM user WHERE cardid = ?", card)
	if err != nil {
		res = set.BOT_ERROR_DELETE_USER
	} else {
		res = set.BOT_WARNING_DELETE_FINE
		show = u.ShowAllInBot()
	}
	return res, show
}

// –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞!
func (u User) AddInBot(card, fio, spec, sal string) string {
	var res string
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("INSERT INTO user (cardid, fio, speciality, sallary) VALUES (?, ?, ?, ?)", card, fio, spec, sal)
	if err != nil {
		res = set.BOT_ERROR_ADDTODB

	} else {
		res = set.BOT_WARNING_ADD_FINE
	}

	return res
}

//–ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞
func (u User) EditFromBot(cardnum, newFio, newSpec, newSal string) (string, string) {
	var res, show string
	db, err := sql.Open("mysql", ConnString())
	if err != nil {
		panic(err)
	}
	defer db.Close()

	_, err = db.Exec("UPDATE user SET fio = ? WHERE cardid = ?", newFio, cardnum)
	_, err = db.Exec("UPDATE user SET speciality = ? WHERE cardid = ?", newSpec, cardnum)
	_, err = db.Exec("UPDATE user SET sallary = ? WHERE cardid = ?", newSal, cardnum)

	if err != nil {
		res = set.BOT_ERROR_EDITUSER
	} else {

		res = set.BOT_WARNING_EDITUSER_FINE
		show = u.ShowAllInBot()
	}

	return res, show
}

// –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ—Ç–∫–µ
/*func Check(fio, cardnum, spec, dt, tm string) {
	tg_key := GetKey(set.TokenFile)
	c := New(tg_key)
	chatId := -644032460
	if fio != "0" {
		cText := ("üü¢–û—Ç–º–µ—Ç–∏–ª—Å—è:  \n" + fio + "\n–ù–æ–º–µ—Ä: " + cardnum + "\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: " + spec + "\n–î–∞—Ç–∞: " + dt + "\n–í—Ä–µ–º—è: " + tm)
		err := c.SendMessage(cText, int64(chatId))
		if err != nil {
			fmt.Println(set.ERROR_SEND_BOT, err)
		}
	}
}*/
