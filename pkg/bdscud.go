package pkg

import (
	"database/sql"
	"fmt"
	"kontroller/set"
	"log"
	"os"

	_ "github.com/mattn/go-sqlite3"
	"github.com/olekukonko/tablewriter"
)

type User struct {
	Cardid     string
	Fio        string
	Speciality string
	Salary     string
}

type Journal struct {
	Date string
	Fio  string
	Time string
}

type SuperUser struct {
	Login string
	Pass  string
	Email string
}

type EmplChanger interface {
	Add()
	Edit()
	AddInBot()
	DeleteRow()
	ClearDB()
	ShowAll()
	DeleteRowInBot()
	ShowAllInBot()
	EditFromBot()
}

//! ============= –ú–ï–¢–û–î–´ –ü–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú ====================
//–ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è—é—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äa —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
func (su SuperUser) Add() {
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()

	var supUser = new(SuperUser)

	fmt.Println(string(set.Yellow), "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω", string(set.ResetColor))
	supUser.Login = NewScan()

	fmt.Println(string(set.Yellow), "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", string(set.ResetColor))
	supUser.Pass = NewScan()

	fmt.Println(string(set.Yellow), "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É", string(set.ResetColor))
	supUser.Email = NewScan()

	if err != nil {
		fmt.Println(set.Red, "–û–®–ò–ë–ö–ê:", set.ResetColor, err)
		panic(err)
	}
	var yesNo string
	fmt.Printf(set.Yellow+"–í–≤–µ–¥–µ–Ω–Ω–∞—è –í–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞?\n"+set.ResetColor+"\n–õ–æ–≥–∏–Ω: %v \n–ü–∞—Ä–æ–ª—å: %v \n–ü–æ—á—Ç–∞: %v \n"+set.Yellow+"\n–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É Y-[Yes], –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –∏–ª–∏ N-[N], –µ—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã"+set.ResetColor+"\n", supUser.Login, supUser.Pass, supUser.Email)
	fmt.Scan(&yesNo)
	if yesNo == "Y" {
		_, err = db.Exec("insert into superuser (Login, Password, Email) values (?, ?, ?)", supUser.Login, supUser.Pass, supUser.Email)
		fmt.Println(set.Green, "–ó–∞–ø–∏—Å—å –≤ –ë–î —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", set.ResetColor)
	} else if yesNo == "N" {
		fmt.Println(set.Red, "–ó–∞–ø–∏—Å—å –≤ –ë–î - –ü–†–ï–†–í–ê–ù–ê", set.ResetColor)
	} else {
		fmt.Println(set.Red, "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ", set.ResetColor)
	}
}

//–ú–µ—Ç–æ–¥ —É–¥–∞–ª—è—é—â–∏–π  –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
func (su SuperUser) DeleteRow(login string) {

	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()

	// —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å id=1
	_, err = db.Exec("DELETE FROM superuser WHERE Login = ?", login)
	if err != nil {
		fmt.Println(set.Red, "–û–®–ò–ë–ö–ê:", set.ResetColor, err)
		panic(err)
	}
	fmt.Println("–ó–∞–ø–∏—Å—å –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - ", login, "—É–¥–∞–ª–µ–Ω–∞") // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
}

//–ú–µ—Ç–æ–¥ —É–¥–∞–ª—è—é—â–∏–π  –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —á–∞—Ç–∞ –±–æ—Ç–∞
func (su SuperUser) DeleteRowInBot(log string) string {
	var res string
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	// —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å Login=log
	_, err = db.Exec("delete from superuser where Login = ?", log)
	if err != nil {
		res = "‚õîÔ∏è–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
	} else {
		res = "‚úÖ–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è' –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î!"
	}
	return res
}

//–ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
func (su SuperUser) ShowAll() {
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("select * from superuser")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	table := tablewriter.NewWriter(os.Stdout)
	table.SetHeader([]string{"ID", "–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å", "–ü–æ—á—Ç–∞"})
	for rows.Next() {
		var ssId, ssLog, ssPas, ssMail string

		err = rows.Scan(&ssId, &ssLog, &ssPas, &ssMail)
		if err != nil {
			log.Fatal(err)
		}
		data := [][]string{
			[]string{ssId, ssLog, ssPas, ssMail},
		}

		for _, v := range data {
			table.Append(v)
		}

	}

	table.Render()
}

//TODO –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤  –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
func (su SuperUser) Edit() {
}

//TODO –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤  –∏–∑ —á–∞—Ç –±–æ—Ç–∞
func (su SuperUser) EditFromBot() {

}

//–ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —á–∞—Ç –±–æ—Ç–∞
func (su SuperUser) ShowAllInBot() string {
	var id string
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("select * from superuser")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	var str string

	for rows.Next() {
		err := rows.Scan(&id, &su.Login, &su.Pass, &su.Email)
		if err != nil {
			fmt.Println(err)
			continue
		}

		str += "\n ID: " + id + "\n –õ–æ–≥–∏–Ω: " + su.Login + "\n –ü–∞—Ä–æ–ª—å: " + su.Pass + "\n –ü–æ—á—Ç–∞: " + su.Email + "\n=====================\n"
	}
	return str
}

// –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è—é—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞!
func (su SuperUser) AddInBot(log, pass, mail string) string {
	var res string
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("insert into superuser (Login, Password, Email) values (?, ?, ?)", log, pass, mail)
	if err != nil {
		res = "‚õîÔ∏è–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
	} else {
		res = "‚úÖ–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è' –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
	}

	return res
}

//! ============= –ú–ï–¢–û–î–´ –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú ====================
// –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å!
func (u User) Add() {
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	var usr = new(User)

	fmt.Println(set.Yellow, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã-–ø—Ä–æ–ø—É—Å–∫–∞:", set.ResetColor)
	usr.Cardid = NewScan()
	fmt.Println(set.Yellow, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", set.ResetColor)
	usr.Fio = NewScan()
	fmt.Println(set.Yellow, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", set.ResetColor)
	usr.Speciality = NewScan()
	fmt.Println(set.Yellow, "–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", set.ResetColor)
	usr.Salary = NewScan()

	var yesNo string
	fmt.Printf(set.Yellow+"–í–≤–µ–¥–µ–Ω–Ω–∞—è –í–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞?\n"+set.ResetColor+"\n‚Ññ –ö–∞—Ä—Ç—ã: %v \n–§–∏–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: %v \n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %v \n–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: %v \n"+set.Yellow+"\n–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –î-[–î–∞], –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –∏–ª–∏ –ù-[–ù–µ—Ç], –µ—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã"+set.ResetColor+"\n", usr.Cardid, usr.Fio, usr.Speciality, usr.Salary)
	fmt.Scan(&yesNo)
	if yesNo == "–î" {
		_, err = db.Exec("insert into user (CardId, Fio, Speciality, Salary) values (?, ?, ?, ?)", usr.Cardid, usr.Fio, usr.Speciality, usr.Salary)
		if err != nil {
			fmt.Println(set.Red, "–û–®–ò–ë–ö–ê:", set.ResetColor, err)
			panic(err)
		}
		fmt.Println(set.Green, "–ó–∞–ø–∏—Å—å –≤ –ë–î —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", set.ResetColor)

	} else if yesNo == "–î" {
		fmt.Println(set.Red, "–ó–∞–ø–∏—Å—å –≤ –ë–î - –ü–†–ï–†–í–ê–ù–ê", set.ResetColor)
	} else {

		fmt.Println(set.Red, "\nY–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ", set.ResetColor)
	}
	db.Close()
}

// –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞!
func (u User) AddInBot(card, fio, spec, sal string) string {
	var res string
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("insert into user (CardId, Fio, Speciality, Salary) values (?, ?, ?, ?)", card, fio, spec, sal)
	if err != nil {
		res = "‚õîÔ∏è–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
	} else {
		res = "‚úÖ–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è' –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
	}

	return res
}

// –ú–µ—Ç–æ–¥ —É–¥–∞–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏!
func (u User) DeleteRow(cardnum string) {
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("DELETE from USER where CardId = ?", cardnum)

	if err != nil {
		fmt.Println(set.Red, "–û–®–ò–ë–ö–ê:", set.ResetColor, err)
		panic(err)
	}
	fmt.Println(set.Green, "–ó–∞–ø–∏—Å—å –ø–æ ‚Ññ –∫–∞—Ä—Ç—ã - ", cardnum, "—É–¥–∞–ª–µ–Ω–∞", set.ResetColor)
}

// –ú–µ—Ç–æ–¥ —É–¥–∞–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞!
func (u User) DeleteRowInBot(fio string) string {
	var res string
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("delete from user where Fio = ?", fio)

	if err != nil {
		res = "‚õîÔ∏è–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
	} else {
		res = "‚úÖ–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è' –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î!"
	}
	return res
}

// –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å!
func (u User) ShowAll() {
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("SELECT * FROM user")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	table := tablewriter.NewWriter(os.Stdout)
	table.SetHeader([]string{"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", "–§–ò–û –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ó–∞—Ä–ø–ª–∞—Ç–∞"})
	for rows.Next() {
		var sCardNum, sFio, sSpec, sSalary string

		err = rows.Scan(&sCardNum, &sFio, &sSpec, &sSalary)
		if err != nil {
			log.Fatal(err)
		}
		data := [][]string{
			[]string{sCardNum, sFio, sSpec, sSalary},
		}

		for _, v := range data {
			table.Append(v)
		}

	}

	table.Render()
}

// –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç –±–æ—Ç–∞!
func (u User) ShowAllInBot() string {

	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("select * from user")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	var str string

	for rows.Next() {
		err := rows.Scan(&u.Cardid, &u.Fio, &u.Speciality, &u.Salary)
		if err != nil {
			fmt.Println(err)
			continue
		}

		str += "\n –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: " + u.Cardid + "\n –§–ò–û: " + u.Fio + "\n –î–æ–ª–∂–Ω–æ—Å—Ç—å: " + u.Speciality + "\n –ó–∞—Ä–ø–ª–∞—Ç–∞: " + u.Salary + "\n=====================\n"
	}
	return str
}

//TODO –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
func (u User) Edit() {

}

//TODO –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —á–∞—Ç –±–æ—Ç–∞
func (u User) EditFromBot() {

}

//! ============= –ú–ï–¢–û–î–´ –ü–û –†–ê–ë–û–¢–ï –° –¢–†–ï–ö–ò–ù–ì–û–ú ====================

func (u User) CheckInTimeValidation(cardnum string) []string { // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
	var crd string
	var str = []string{"0", "0", "0"}

	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("SELECT * FROM user WHERE CardId = ?", cardnum)
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	users := []User{}

	for rows.Next() {
		p := User{}
		err := rows.Scan(&p.Cardid, &p.Fio, &p.Speciality, &p.Salary)
		if err != nil {
			fmt.Println(err)
			continue
		}
		users = append(users, p)
		crd = p.Cardid
		str[0] = p.Cardid
		str[1] = p.Fio
		str[2] = p.Speciality
		//str = append(str, p.Cardid, p.Fio, p.Speciality)

	}
	if crd == "" {
		fmt.Println(set.Red, set.AccesDenied, set.ResetColor)
	} else {
		fmt.Println(set.Cyan, set.Acces, set.ResetColor)

	}
	return str
}

func (u User) AdCheckinToDb(fio, dt, tm string) { // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–µ–∫ –≤ –±–¥
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("INSERT INTO journal (FioVisiter, Date, Time) values (?, ?, ?)", fio, dt, tm)
	if err != nil {
		fmt.Println(set.Red, "–û–®–ò–ë–ö–ê:", set.ResetColor, err)
	}
}

//! ============= –ú–ï–¢–û–î–´ –ü–û –†–ê–ë–û–¢–ï –° –û–¢–ß–ï–¢–ê–ú–ò =====================

//! ============= –ú–ï–¢–û–î–´ –ü–û –†–ê–ë–û–¢–ï –° –°–ò–°–¢–ï–ú–û–ô –ö–û–ù–¢–†–û–õ–Ø –ö–¢–û –í –¶–ï–•–£ =====================
func (j Journal) WhoInPlace() {
	today := "Sun May  1 03:21:54 2022"
	var id string
	fmt.Println(today)
	db, err := sql.Open("sqlite3", "./scud.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	rows, err := db.Query("SELECT * FROM journal WHERE Date = ?", today)
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	journals := []Journal{}
	for rows.Next() {
		p := Journal{}
		err := rows.Scan(&id, &p.Date, &p.Fio, &p.Time)
		if err != nil {
			fmt.Println(err)
			continue
		}
		journals = append(journals, p)
	}
	fmt.Println(journals)
}
